[ID]
; ID elements in the gallery and local folder name
; five keys to execute the scrap with beatifulsoup4
; types is the python type of the other keys in the config
; divs is the HTML div of interest
; attrs is the HTML attribute of interest
; elements is a secondary HTML div of interest
; cleanup are optional HTML tags to clean after scrap
types = [str, dict, str, None]
divs = a
attrs = {
    "href": re.compile("^[RM]{2}[0-9]+|^[0-9]{3}"),
    }
elements = href
cleanup = None

[TITLE]
; tittle of the elements in the gallery
types = [str, dict, str, None]
divs = a
attrs = {
    "class": "collection-art-object-wrapper",
    }
elements = title
cleanup = None
[COLLECTION_URL]
; recovered elements (paint) URL
types = [str, dict, str, None]
divs = a
attrs = {
    "class": "collection-art-object-wrapper",
    }
elements = href
cleanup = None
[DOWNLOAD_URL]
; direct image URL/link for the image in the gallery
types = [str, dict, str, None]
divs = a
attrs = {
    "class": "btn-icon art-object-header-bar-button",
    "href": re.compile("^/asset/download/"),
    }
elements = href
cleanup = None
[HAS_PICTURE]
; boolean if there is a picture file in the local folder
types = [str, dict, str, str]
divs = Content-Disposition
attrs = {
    "Content-Type": "image/jpeg",
    }
elements = ;
cleanup = filename=
[DESCRIPTION]
; JSON with the description of the elements
types = [str, dict, list, None]
divs = section
attrs = {
    "class": re.compile("art-object-page-content-"),
    }
elements = ["h1", "p", "a"]
cleanup = ["class", "art-object-page-content-", "href"]
[SEARCH_TAGS]
; JSON with the collection tags of the elements
types = [str, dict, str, str]
divs = section
attrs = {
    "class": "artobject-page-collection-links",
    }
elements = a
; elements = a ; ["li", "a"] # ["ul", "li"]
cleanup = href
[OBJ_DATA]
; JSON with the museum object data of the elements
types = [str, dict, list, None]
divs = dl
attrs = {
    "class": "definition-list",
    }
; attrs = {
;     "class": "definition-list",
;     # "string": "Object data",
;     }
elements = ["dt", "dd"]
cleanup = None
[RELATED_WORKS]
; JSON with the related work text and URLs of the elements
types = [str, dict, str, list]
divs = div
attrs = {
    "class": "teaser-row content-row grid-row",
    }
elements = article
cleanup = ["span", "a", "href"]
[IMG_DATA]
; RGW file data from original image
# img file extension to work in the gallery elements
type = [str, dict, dict]
infext = jpg
outfext = {
    "rgb": "jpg", "bw": "jpg",
    }
fsufix = {
    "rgb": "-rgb", "bw": "-bw",
    }
[IMG_SHAPE]
; numpy array shape for the RGW and B&W matrix
types = [str, dict]
sfext = jpg
fsufix = {
    "rgb": "-rgb", "bw": "-bw",
    }